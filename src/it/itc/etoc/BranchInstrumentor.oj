/**
 * @(#) BranchInstrumentor.o	v. 1.0 - October 14, 2004
 *
 * This software was written by Paolo Tonella (tonella@itc.it) at ITC-irst,
 * Centro per la Ricerca Scientifica e Tecnlogica.
 *
 * Distributed under the Gnu GPL (General Public License). See GPL.TXT
 */


package it.itc.etoc;
import openjava.mop.*;
import openjava.ptree.*;
import java.io.*;
import java.util.*;

/**
 * Adds trace instructions to an input Java program.
 *
 * <p>
 * This class exploits the OpenJava compiler to instrument the branches of
 * a Java program. 
 *
 * <p>
 * The CLASSPATH must point to the location of the OpenJava classes:
 * <pre>
 * setenv CLASSPATH <OPENJAVA-DIR>/classes:${CLASSPATH}
 * </pre>
 */
public class BranchInstrumentor instantiates Metaclass extends OJClass {
  public static int branchCounter = 0;
  String className;
  PrintStream signatureFile;
  PrintStream targetFile;
  PrintStream pathFile;
  boolean isFirstTarget = true;

  static String traceInterfaceType = "java.util.Set";
  static String traceConcreteType = "java.util.HashSet";
  
  public String getClassName() {
    return className;
  }

  /**
   * Inserts import statements (java.util.*) at the beginning of Java file.
   *
   * <p>
   * Currently unused.
   */
  public void insertImports() {
    try {
      ParseTreeObject pt = getSourceCode();
      while (!(pt instanceof CompilationUnit))
	pt = pt.getParent();
      CompilationUnit cu = (CompilationUnit)pt;
      String[] oldImports = cu.getDeclaredImports();
      String[] newImports = new String[oldImports.length + 2];
      System.arraycopy(oldImports, 0, newImports, 0, oldImports.length);
      newImports[oldImports.length] = "java.util.*;";
      newImports[oldImports.length+1] = "it.itc.etoc.*;";
      cu.setDeclaredImports(newImports);
    } catch (CannotAlterException e) {
      System.err.println(e);
      System.exit(1);
    }
  }

  /**
   * Adds field trace to class being instrumented.
   */
  public void insertTraceField() {
    try {
      OJModifier mod = OJModifier.forModifier(OJModifier.STATIC);
      /*OJField f = new OJField(this, mod, 
			      OJClass.forName(traceInterfaceType),
			      "trace");*/
      FieldDeclaration fd = new FieldDeclaration(
	   new ModifierList(ModifierList.STATIC),
	   TypeName.forOJClass(OJClass.forName(traceInterfaceType)),
	   "trace", 
	   new AllocationExpression(OJClass.forName(traceConcreteType),
				    new ExpressionList())
      );
      OJField f = new OJField(getEnvironment(), this, fd);
      addField(f);
    } catch(OJClassNotFoundException e) {
      System.err.println(e);
      System.exit(1);
    } catch (CannotAlterException e) {
      System.err.println(e);
      System.exit(1);
    }
  }

  /**
   * Adds method getTrace to class being instrumented.
   */
  public void insertTraceAccessor() {
    try {
      StatementList body = makeStatementList("return trace;");
      OJModifier mod = OJModifier.forModifier(OJModifier.PUBLIC);
      mod = mod.add(OJModifier.STATIC);
      OJMethod m = new OJMethod(this, mod, OJClass.forName(traceInterfaceType),
				"getTrace", new OJClass[0], new OJClass[0],
				body);
      addMethod(m);
    } catch(OJClassNotFoundException e) {
      System.err.println(e);
      System.exit(1);
    } catch (CannotAlterException e) {
      System.err.println(e);
      System.exit(1);
    } catch (MOPException e) {
      System.err.println(e);
      System.exit(1);
    }
  }

  /**
   * Adds method newTrace to class being instrumented.
   */
  public void insertTraceCreator() {
    try {
      StatementList body = makeStatementList(
			    "trace = new " + traceConcreteType + "();");
      OJModifier mod = OJModifier.forModifier(OJModifier.PUBLIC);
      mod = mod.add(OJModifier.STATIC);
      OJMethod m = new OJMethod(this, mod, OJClass.forName("void"),
				"newTrace", new OJClass[0], new OJClass[0],
				body);
      addMethod(m);
    } catch(OJClassNotFoundException e) {
      System.err.println(e);
      System.exit(1);
    } catch (CannotAlterException e) {
      System.err.println(e);
      System.exit(1);
    } catch (MOPException e) {
      System.err.println(e);
      System.exit(1);
    }
  }

  /**
   * Creates a statement that adds a branch id (Integer) to trace.
   */
  public Statement makeTraceStatement() {
    Statement traceBranch = null;
    try {
      branchCounter++;
      traceBranch = makeStatement("trace.add(new java.lang.Integer(" + 
				  branchCounter + "));");
      printTarget(branchCounter);
      printPath(branchCounter);
    } catch (MOPException e) {
      System.err.println(e);
      System.exit(1);
    }
    return traceBranch;
  }

  /**
   * Initiates the visit of the parse tree from the whole method body.
   */
  public void insertBranchTraces(StatementList block) {
    try {
      block.accept(new BranchTraceVisitor(this));
    } catch (ParseTreeException e) {
      System.err.println(e);
      System.exit(1);
    }
  }

  /**
   * Prints control deps leading to a target into path file.
   */
  private void printPath(int tgt) {
    pathFile.print(tgt + ":");
    java.util.Iterator controlDep = 
      BranchTraceVisitor.getControlDependences().iterator();
    while (controlDep.hasNext()) {
      Integer br = (Integer)controlDep.next();
      pathFile.print(" " + br);
    }
    pathFile.println();
  }

  /**
   * Prints a single target into target file.
   */
  private void printTarget(int tgt) {
    if (isFirstTarget) {
      targetFile.print(": " + tgt);
      isFirstTarget = false;
    } else {
      targetFile.print(", " + tgt);
    }
  }

  /**
   * Prints full method name into target file.
   */
  private void printTargetMethod(OJMember mem) {
    isFirstTarget = true;
    targetFile.print(getSignature(mem));
  }
  
  /**
   * Terminates printing targets for given method.
   */
  private void printTargetEnd() {
    targetFile.println();
  }

  /**
   * Returns the full name of method or constructor.
   */
  private String getSignature(OJMember mem) {
    String clName = mem.getDeclaringClass().toString();
    String signature = clName;
    signature += "." + mem.signature().toString();
    signature = signature.replaceAll("\\$", "\\\\\\$");
    clName = clName.replaceAll("\\$", "\\\\\\$");
    signature = signature.replaceFirst("\\.constructor\\s+", "." + clName);
    signature = signature.replaceFirst("\\.method\\s+", ".");
    signature = signature.replaceAll("class\\s+", "");
    signature = signature.replaceAll("\\\\\\$", "\\$");
    return signature;
  }

  /**
   * Prints full method/constructor name into signature file.
   */
  private void printSignature(OJMember mem) {
    if (mem.getModifiers().isPrivate() || mem.getModifiers().isProtected())
      return;
    signatureFile.println(getSignature(mem));
  }

  /**
   * Opens sigature, target and path files for output.
   */
  private void openOutputFiles() {
    try{
      signatureFile = new PrintStream(
			   new FileOutputStream(className + ".sign"));
      targetFile = new PrintStream(
			   new FileOutputStream(className + ".tgt"));
      pathFile = new PrintStream(
			   new FileOutputStream(className + ".path"));
    } catch(FileNotFoundException e) {
      System.err.println("File not found: " + e);
      System.exit(1);
    }    
  }

  /**
   * Overrides translation of a class to add instrumentation.
   */
  public void translateDefinition() throws MOPException {
    //insertImports();
    if (className == null) className = getSimpleName();
    openOutputFiles();
    insertTraceField();
    OJConstructor[] constructors = getDeclaredConstructors();
    for (int i = 0; i < constructors.length; ++i) {
      printSignature(constructors[i]);
      printTargetMethod(constructors[i]);
      insertBranchTraces(constructors[i].getBody());
      printTargetEnd();
    }
    OJMethod[] methods = getDeclaredMethods();
    for (int i = 0; i < methods.length; ++i) {
      printSignature(methods[i]);
      printTargetMethod(methods[i]);
      insertBranchTraces(methods[i].getBody());
      printTargetEnd();
    }
    insertTraceCreator();
    insertTraceAccessor();
  }

  public static Set computeUncovered(String tgtFile, Set covered) {
    Set uncovered = new HashSet();
    Set toCover = new HashSet();
    try {
      String s;
      BufferedReader in = new BufferedReader(new FileReader(tgtFile));
      while ((s = in.readLine()) != null) {
	s = s.substring(s.indexOf(":") + 1);
	s = s.replaceAll("\\s+", "");
	String[] targets = s.split(",");
	for (int i = 0 ; i < targets.length ; i++) {
	  toCover.add(new Integer(Integer.parseInt(targets[i])));
	}
      }    
    } catch(IOException e) {
      System.err.println("IO error: " + tgtFile);
      System.exit(1);
    }
    Iterator i = toCover.iterator();
    while (i.hasNext()) {
      Integer target = (Integer)i.next();
      if (!covered.contains(target))
	uncovered.add(target);
    }
    return uncovered;
  }
}


